---

import BaseLayout from "@/layouts/BaseLayout.astro";
import BackLink from "@/components/garden/BackLink.astro";
import GardenHeader from "@/components/garden/GardenHeader.astro";
import LeafCard from "@/components/garden/LeafCard.astro";
import AddButton from "@/components/garden/AddButton.astro";
import MultiSelectToolbar from "@/components/garden/MultiSelectToolbar.astro";
import { isUserAdmin } from "@/lib/auth";
import { getTree } from "@/lib/supabase";

// Get the tree slug from the URL parameters
const { tree: treeSlug } : any = Astro.params;

// Get the updated query param (used for cache busting after edits)
const updated = Astro.url.searchParams.get('updated');

// Check if user is admin
const { userId } = Astro.locals.auth();
const isAdmin = await isUserAdmin(userId);

// Query the tree with its embedded leaves and leaf references
const { data: tree, error } = await getTree(treeSlug);

if (error || !tree) {
  console.error("Error fetching tree:", error);
  return Astro.redirect("/garden");
}

// Define metadata for growth stages
const metadata = {
  growthStages: [
    {
      name: "seedling",
      description: "Initial thoughts or ideas that are still forming",
    },
    {
      name: "budding",
      description: "Ideas that are taking shape but need more development",
    },
    {
      name: "growing",
      description: "Well-developed thoughts that continue to evolve",
    },
    {
      name: "evergreen",
      description: "Mature, well-tested ideas that remain relevant over time",
    },
  ],
};

// Add cache control headers for ISR
Astro.response.headers.set('Cache-Control', 'public, max-age=60, s-maxage=3600');
---

<BaseLayout title={tree.name} description={tree.description}>
  <div class="container mx-auto pt-24 pb-12 md:pt-32 xl:pt-24">
    <BackLink href="/garden/" text="Back to Garden" />
    
    <div class="flex justify-between items-center mb-6">
      <GardenHeader
        title={tree.name}
        description={tree.description}
        tree={{
          id: tree.id,
          slug: tree.slug,
        }}
      />
      
      {isAdmin && (
        <button
          id="toggle-select-mode"
          class="rounded-md border border-black/20 bg-white/50 px-3 py-1.5 text-sm font-medium text-black hover:bg-white/80 dark:border-white/20 dark:bg-black/50 dark:text-white dark:hover:bg-black/80"
        >
          Select
        </button>
      )}
    </div>

    <div class="space-y-6">
      {
        tree.leaves.map((leaf: any) => (
          <LeafCard leaf={leaf} treeSlug={tree.slug} metadata={metadata} />
        ))
      }

      <!-- Add Leaf Button -->
      <div class="h-[120px]">
        <AddButton type="leaf" treeSlug={tree.slug} />
      </div>
    </div>
    
    <!-- Multi-select toolbar - only show for admin -->
    {isAdmin && <MultiSelectToolbar type="leaf" treeSlug={tree.slug} />}
  </div>
</BaseLayout>

<script>
  function setupSelectMode() {
    const toggleButton: any = document.getElementById('toggle-select-mode');
    if (!toggleButton || toggleButton._initialized) return;
    toggleButton._initialized = true;
    
    let selectMode = false;
    
    toggleButton.addEventListener('click', () => {
      selectMode = !selectMode;
      toggleButton.textContent = selectMode ? 'Cancel' : 'Select';
      
      const selectCheckboxes = document.querySelectorAll('.select-checkbox');
      selectCheckboxes.forEach(checkbox => {
        checkbox.classList.toggle('hidden', !selectMode);
      });
      
      if (!selectMode) {
        // Uncheck all checkboxes when exiting select mode
        document.querySelectorAll('.selectable-item input[type="checkbox"]').forEach(checkbox => {
          (checkbox as HTMLInputElement).checked = false;
        });
        document.querySelectorAll('.selectable-item').forEach(item => {
          item.classList.remove('!bg-green-100', '!dark:bg-green-900');
        });
      }
    });
  }

  setupSelectMode();
</script>
