---
// Use ISR for this page
export const prerender = false;

import BaseLayout from "@/layouts/BaseLayout.astro";
import BackLink from "@/components/garden/BackLink.astro";
import LeafHeader from "@/components/garden/LeafHeader.astro";
import LeafContent from "@/components/garden/LeafContent.astro";
import { getTree, getLeaf } from "@/lib/supabase";

// Get the tree and leaf slugs from the URL parameters
const { tree: treeSlug, leaf: leafSlug }: any = Astro.params;

// Get the updated query param (used for cache busting after edits)
const updated = Astro.url.searchParams.get('updated');

// Query the tree and leaf data
const { data: tree, error: treeError } = await getTree(treeSlug);
const { data: leaf, error: leafError } = await getLeaf(treeSlug, leafSlug);

if (treeError || !tree || leafError || !leaf) {
  console.error("Error fetching data:", treeError || leafError);
  return Astro.redirect("/garden");
}

// Define metadata for growth stages
const metadata = {
  growthStages: [
    {
      name: "seedling",
      description: "Initial thoughts or ideas that are still forming",
    },
    {
      name: "budding",
      description: "Ideas that are taking shape but need more development",
    },
    {
      name: "growing",
      description: "Well-developed thoughts that continue to evolve",
    },
    {
      name: "evergreen",
      description: "Mature, well-tested ideas that remain relevant over time",
    },
  ],
};

// Add cache control headers for ISR
Astro.response.headers.set('Cache-Control', 'public, max-age=60, s-maxage=3600');
---

<BaseLayout title={leaf.title} description={leaf.content.substring(0, 150)}>
  <div class="container mx-auto pt-24 pb-12 md:pt-32 xl:pt-24">
    <BackLink href={`/garden/${tree.slug}`} text={`Back to ${tree.name}`} />

    <article class="prose prose-lg max-w-none dark:prose-invert">
      <LeafHeader leaf={leaf} treeSlug={treeSlug} metadata={metadata} />
      <LeafContent content={leaf.content} references={leaf.leaf_references} />
    </article>
  </div>
</BaseLayout>
