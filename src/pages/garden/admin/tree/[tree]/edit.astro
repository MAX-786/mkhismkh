---
export const prerender = false;
import FormLayout from "@/components/garden/admin/FormLayout.astro";
import TreeForm from "@/components/garden/admin/TreeForm.astro";
import { isUserAdmin } from "@/lib/auth";
import { getTree, updateTree, revalidateCache } from "@/lib/supabase";

// Check if user is admin
const { userId } = Astro.locals.auth();
const isAdmin = await isUserAdmin(userId);

if (!isAdmin) {
  return Astro.redirect("/garden");
}

// Get tree slug from params
const { tree: treeSlug }: any = Astro.params;

// Get tree data
const { data: tree, error: treeError } = await getTree(treeSlug);

if (treeError || !tree) {
  console.error("Error fetching tree:", treeError);
  return Astro.redirect("/garden");
}
let formError = "";

// Process form submission
if (Astro.request.method === "POST") {
  try {
    const formData = await Astro.request.formData();
    const name = formData.get("name")?.toString() || "";
    const slug = formData.get("slug")?.toString() || "";
    const description = formData.get("description")?.toString() || "";
    
    const { data, error } = await updateTree(treeSlug, { name, slug, description });
    
    if (error) throw error;
    
    // Revalidate affected pages
    await revalidateCache([
      '/garden',
      `/garden/${slug}`,
    ]);
    
    // Redirect with cache-busting query param
    return Astro.redirect(`/garden/${slug}?updated=true`);
  } catch (error) {
    formError = "An error occurred while updating the tree";
    console.error("Error updating tree:", error);
  }
}

// Prevent caching for admin pages
Astro.response.headers.set('Cache-Control', 'no-store, max-age=0');
---

<FormLayout
  title="Edit Tree"
  description="Update this tree in your digital garden"
  backLink={`/garden/${treeSlug}`}
  backText={`Back to ${tree.name}`}
>
  <div class="flex justify-between items-center mb-6">
    <h2 class="text-xl font-medium">Edit Tree Details</h2>
    <a
      href={`/garden/${treeSlug}`}
      class="px-4 py-2 rounded-md border border-black/20 text-black/70 hover:bg-black/5 dark:border-white/20 dark:text-white/70 dark:hover:bg-white/5"
    >
      Cancel
    </a>
  </div>

  <TreeForm
    formError={formError}
    initialData={{
      name: tree.name,
      slug: tree.slug,
      description: tree.description,
    }}
    submitLabel="Update Tree"
  />
</FormLayout>