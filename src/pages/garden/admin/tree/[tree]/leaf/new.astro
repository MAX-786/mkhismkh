---
export const prerender = false;
import FormLayout from "@/components/garden/admin/FormLayout.astro";
import LeafForm from "@/components/garden/admin/LeafForm.astro";
import { isUserAdmin } from "@/lib/auth";
import { getTree, createLeaf } from "@/lib/supabase";

// Check if user is admin
const { userId } = Astro.locals.auth();
const isAdmin = await isUserAdmin(userId);

if (!isAdmin) {
  return Astro.redirect("/garden");
}

// Get tree slug from params
const { tree: treeSlug }: any = Astro.params;

// Get tree data
const { data: tree, error: treeError } = await getTree(treeSlug);

if (treeError || !tree) {
  console.error("Error fetching tree:", treeError);
  return Astro.redirect("/garden");
}

// Define metadata for growth stages
const metadata = {
  growthStages: [
    {
      name: "seedling",
      description: "Initial thoughts or ideas that are still forming",
    },
    {
      name: "budding",
      description: "Ideas that are taking shape but need more development",
    },
    {
      name: "growing",
      description: "Well-developed thoughts that continue to evolve",
    },
    {
      name: "evergreen",
      description: "Mature, well-tested ideas that remain relevant over time",
    },
  ],
};
const growthStages = metadata.growthStages;

let formError = "";

// Handle form submission
if (Astro.request.method === "POST") {
  try {
    const formData = await Astro.request.formData();
    const title = formData.get("title")?.toString();
    const slug = formData.get("slug")?.toString();
    const content = formData.get("content")?.toString();
    const growthStage = formData.get("growth_stage")?.toString();
    const tagsInput = formData.get("tags")?.toString() || "";
    const tags = tagsInput ? JSON.parse(tagsInput) : [];

    // Validate inputs
    if (!title || !slug || !content || !growthStage) {
      formError = "All fields are required";
    } else {
      // Insert new leaf
      const { error } = await createLeaf({
        title,
        slug,
        content,
        growth_stage: growthStage,
        tree_id: tree.id,
        tags,
      });

      if (error) throw error;

      // Redirect to the tree page
      return Astro.redirect(`/garden/${treeSlug}`);
    }
  } catch (error) {
    console.error("Error creating leaf:", error);
    formError = "An error occurred while creating the leaf";
  }
}
---

<FormLayout
  title={`Add New Leaf to ${tree.name}`}
  description={`Create a new leaf in the ${tree.name} tree`}
  backLink={`/garden/${treeSlug}`}
  backText={`Back to ${tree.name}`}
>
  <LeafForm growthStages={growthStages || []} formError={formError} />
</FormLayout>
