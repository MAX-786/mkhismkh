---
// Use ISR for this page
export const prerender = false;

import BaseLayout from "@/layouts/BaseLayout.astro";
import GardenHeader from "@/components/garden/GardenHeader.astro";
import TreeCard from "@/components/garden/TreeCard.astro";
import AddButton from "@/components/garden/AddButton.astro";
import MultiSelectToolbar from "@/components/garden/MultiSelectToolbar.astro";
import { isUserAdmin } from "@/lib/auth";
import { getAllTrees } from "@/lib/supabase";

// Check if user is admin
const { userId } = Astro.locals.auth();
const isAdmin = await isUserAdmin(userId);

// Get the updated query param (used for cache busting after edits)
const updated = Astro.url.searchParams.get('updated');

// Fetch trees with their leaves and nested leaf references
const { data: trees, error } = await getAllTrees();

if (error) {
  console.error("Error fetching trees:", error);
}

// Add cache control headers for ISR
Astro.response.headers.set('Cache-Control', 'public, max-age=60, s-maxage=3600');
---

<BaseLayout
  title="Garden"
  description="My digital garden of ideas and solutions"
>
  <div class="container mx-auto pt-24 pb-12 md:pt-32 xl:pt-24">
    <div class="flex justify-between items-center mb-6">
      <GardenHeader
        title="Digital Garden"
        description="This is where I cultivate and grow my ideas, solutions, and learnings. Browse through different trees to explore various topics."
      />
      
      {isAdmin && (
        <button
          id="toggle-select-mode"
          class="rounded-md border border-black/20 bg-white/50 px-3 py-1.5 text-sm font-medium text-black hover:bg-white/80 dark:border-white/20 dark:bg-black/50 dark:text-white dark:hover:bg-black/80"
        >
          Select
        </button>
      )}
    </div>

    <div class="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
      {trees?.map((tree) => <TreeCard tree={tree} />)}

      <!-- Add Tree Button -->
      <div class="h-[200px]">
        <AddButton type="tree" />
      </div>
    </div>
    
    <!-- Multi-select toolbar - only show for admin -->
    {isAdmin && <MultiSelectToolbar type="tree" />}
  </div>
</BaseLayout>

<script>
  function setupSelectMode() {
    const toggleButton: any = document.getElementById('toggle-select-mode');
    if (!toggleButton || toggleButton._initialized) return;
    toggleButton._initialized = true;
    
    let selectMode = false;
    
    toggleButton.addEventListener('click', () => {
      selectMode = !selectMode;
      toggleButton.textContent = selectMode ? 'Cancel' : 'Select';
      
      const selectCheckboxes = document.querySelectorAll('.select-checkbox');
      selectCheckboxes.forEach(checkbox => {
        checkbox.classList.toggle('hidden', !selectMode);
      });
      
      if (!selectMode) {
        // Uncheck all checkboxes when exiting select mode
        document.querySelectorAll('.selectable-item input[type="checkbox"]').forEach(checkbox => {
          (checkbox as HTMLInputElement).checked = false;
        });
        document.querySelectorAll('.selectable-item').forEach(item => {
          item.classList.remove('selected');
        });
        if (window.updateMultiSelectToolbar) {
          window.updateMultiSelectToolbar(0);
        }
      }
    });
    
    // Handle checkbox changes
    document.addEventListener('change', (e) => {
      if (e.target instanceof HTMLInputElement && e.target.type === 'checkbox') {
        const item = e.target.closest('.selectable-item');
        if (item) {
          item.classList.toggle('selected', e.target.checked);
          
          // Count selected items and update toolbar
          const selectedCount = document.querySelectorAll('.selectable-item.selected').length;
          if (window.updateMultiSelectToolbar) {
            window.updateMultiSelectToolbar(selectedCount);
          }
        }
      }
    });
    
    // Make the entire card clickable for selection when in select mode
    document.addEventListener('click', (e) => {
      if (!selectMode) return;
      
      const target = e.target as HTMLElement;
      // Don't trigger if clicking on a button, link, or checkbox
      if (target.closest('button') || target.closest('a') || target.closest('input')) {
        return;
      }
      
      const item = target.closest('.selectable-item');
      if (item) {
        const checkbox = item.querySelector('input[type="checkbox"]') as HTMLInputElement;
        if (checkbox) {
          checkbox.checked = !checkbox.checked;
          item.classList.toggle('selected', checkbox.checked);
          
          // Count selected items and update toolbar
          const selectedCount = document.querySelectorAll('.selectable-item.selected').length;
          if (window.updateMultiSelectToolbar) {
            window.updateMultiSelectToolbar(selectedCount);
          }
        }
      }
    });
  }

  // Run on initial load and after Astro page transitions
  document.addEventListener('DOMContentLoaded', setupSelectMode);
  document.addEventListener('astro:page-load', setupSelectMode);
</script>

<style>
  .selectable-item.selected {
    @apply ring-2 ring-blue-500 dark:ring-blue-400;
  }
</style>
